/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.96
 * Generated at: 2019-10-25 03:58:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.view.include;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import cafein.ConnectDB;

public final class attendanceCheck1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<!--\r\n");
      out.write("This is a starter template page. Use this page to start your new project from\r\n");
      out.write("scratch. This page gets rid of all links and provides the needed markup only.\r\n");
      out.write("-->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\r\n");
      out.write("  <meta charset=\"UTF-8\" />\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("  <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n");
      out.write("\r\n");
      out.write("  <title>Cafe-in Admin</title>\r\n");
      out.write("\r\n");
      out.write("  <!-- Font Awesome Icons -->\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"../../assets/plugins/fontawesome-free/css/all.min.css\">\r\n");
      out.write("  <!-- Theme style -->\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"../../assets/dist/css/adminlte.min.css\">\r\n");
      out.write("  <!-- Google Font: Source Sans Pro -->\r\n");
      out.write("  <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700\" rel=\"stylesheet\">\r\n");
      out.write("  <!-- iconic icon -->\r\n");
      out.write("  <link href=\"../../assets/open-iconic-master/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\r\n");
      out.write("  <!-- DataTables -->\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"../../assets/plugins/datatables-bs4/css/dataTables.bootstrap4.css\">\r\n");
      out.write("  <!-- custom css -->\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"../../assets/custom/custom.css\">\r\n");
      out.write("  \r\n");
      out.write("  <!-- checkBox css -->\r\n");
      out.write("  <link href=\"../../assets/square/blue.css\" rel=\"stylesheet\">\r\n");
      out.write("  <script src=\"../../assets/icheck.js\"></script>\r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<body background=\"gray\">\r\n");
      out.write("<div class=\"wrapper\">\r\n");
      out.write("<!-- Content Wrapper. Contains page content -->\r\n");
      out.write("  <div class=\"content-wrapper\">\r\n");
      out.write("    <!-- Main content -->\r\n");
      out.write("    <div class=\"content\">\r\n");
      out.write("      <div class=\"container-fluid\">\r\n");
      out.write("        <div class=\"row\">\r\n");
      out.write("\t\t<!-- content 시작 -->\r\n");
      request.setCharacterEncoding("utf-8");
		String usID = request.getParameter("usID");
		int num = Integer.parseInt(request.getParameter("num"));
		String name = null;
		
		
		ConnectDB connectDB = ConnectDB.getInstance();
	    Connection con = connectDB.openConnection();
        String sql = "select ep_name from employee where ep_id=?";
        PreparedStatement pstmt = con.prepareStatement(sql);
        pstmt.setString(1, usID);
        ResultSet rs = pstmt.executeQuery();
        
        while(rs.next()) {
        	name = rs.getString(1);
	        if (name == null) {
	        	out.println("<script>alert('접속에 실패하셨습니다. 다시 접속해주세요.');</script>");
	        }
        }
        rs.close();
        pstmt.close();
        connectDB.closeConnection(con);

      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<ul style=\"list-style:none;\">\r\n");
      out.write("\t\t  <li>");
      out.print( name );
      out.write("님, 안녕하세요. <br>근태 종류를 선택해주세요.</li>\r\n");
      out.write("\t\t  <li><input type=\"radio\" name=\"group\" value=\"start\">출근</li>\r\n");
      out.write("\t\t  <li><input type=\"radio\" name=\"group\" value=\"end\">퇴근</li>\r\n");
      out.write("\t\t</ul>\r\n");
      out.write("\t\t<br>\r\n");
      out.write("\t\t<input type=\"button\" name=\"confirmVal\" value=\"확인\" onclick=\"checkAttend()\">\r\n");
      out.write("        </div>\r\n");
      out.write("        <!-- /.row -->\r\n");
      out.write("      </div><!-- /.container-fluid -->\r\n");
      out.write("    </div>\r\n");
      out.write("    <!-- /.content -->\r\n");
      out.write("  </div>\r\n");
      out.write("  <!-- /.content-wrapper -->\r\n");
      out.write("  </div>\r\n");
      out.write("  <script>\r\n");
      out.write("  \talert(\"Test\");\r\n");
      out.write("  \tVar radioValue;\r\n");
      out.write("\tfunction checkAttend() {\r\n");
      out.write("\t\talert(\"hello\");\r\n");
      out.write("\t\tradioValue = document.getElementById(\"group\").value;\r\n");
      out.write("\t\tlocation.href=\"/attendanceCheck2.jsp?usNum=\" + ");
      out.print(num);
      out.write(" + \"&status=\" + rate_value \r\n");
      out.write("\t\t  +\"&usName=\" + ");
      out.print(name);
      out.write(";\r\n");
      out.write("\t}\r\n");
      out.write("  </script>\r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write(" </body>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
