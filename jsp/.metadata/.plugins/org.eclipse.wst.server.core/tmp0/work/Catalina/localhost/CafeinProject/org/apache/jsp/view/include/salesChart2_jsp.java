/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.96
 * Generated at: 2019-11-18 04:46:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.view.include;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.DecimalFormat;
import cafein.ConnectDB;
import java.sql.*;
import java.util.*;
import org.json.simple.JSONObject;

public final class salesChart2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
  
try{
   ConnectDB connectDB = ConnectDB.getInstance();
   Connection con = connectDB.openConnection();
   String sql = "SELECT menu.mn_num, mn_name, mn_img, mn_price, SUM( od_amnt ) AS order_sum, mn_type FROM order_, menu "
            + "WHERE mn_type = 'c' "
            + "AND menu.mn_num = order_.mn_num AND od_status = '승인' "
            + "GROUP BY mn_name ORDER BY order_sum DESC LIMIT 3";
   PreparedStatement pstmt = con.prepareStatement(sql);
   ResultSet rs = pstmt.executeQuery();
   
   
   ConnectDB connectDB2 = ConnectDB.getInstance();
   Connection con2 = connectDB2.openConnection();
   String sql2 = "SELECT menu.mn_num, mn_name, mn_img, mn_price, SUM( od_amnt ) AS order_sum, mn_type FROM order_, menu "
            + "WHERE mn_type = 'n' "
            + "AND menu.mn_num = order_.mn_num AND od_status = '승인' "
            + "GROUP BY mn_name ORDER BY order_sum DESC LIMIT 3";
   PreparedStatement pstmt2 = con2.prepareStatement(sql2);
   ResultSet rs2 = pstmt2.executeQuery();
   
   ConnectDB connectDB3 = ConnectDB.getInstance();
   Connection con3 = connectDB3.openConnection();
   String sql3 = "SELECT menu.mn_num, mn_name, mn_img, mn_price, SUM( od_amnt ) AS order_sum, mn_type FROM order_, menu "
            + "WHERE mn_type = 'b' "
            + "AND menu.mn_num = order_.mn_num AND od_status = '승인' "
            + "GROUP BY mn_name ORDER BY order_sum DESC LIMIT 3";
   PreparedStatement pstmt3 = con3.prepareStatement(sql3);
   ResultSet rs3 = pstmt3.executeQuery();
   
   
   //DB에서 뽑아온 데이터(JSON) 을 담을 객체. 후에 responseObj에 담기는 값
   List listCoffee     = new LinkedList();
   List listNonCoffee     = new LinkedList();
   List listBakery     = new LinkedList();
   
   //ajax에 반환할 JSON 생성
   JSONObject responseObj = new JSONObject();
   
   JSONObject barCoffee      = null;
   JSONObject barNonCoffee     = null;
   JSONObject barBakery    = null;
   while (rs.next()) {
      barCoffee = new JSONObject();
      barCoffee.put("menuName", rs.getString("mn_name"));
      barCoffee.put("amount", rs.getInt("order_sum"));
      listCoffee.add(barCoffee);
    }
   
   while (rs2.next()) {
           barNonCoffee  = new JSONObject();
           barNonCoffee .put("menuName2", rs2.getString("mn_name"));
           barNonCoffee .put("amount2", rs2.getInt("order_sum"));
           listNonCoffee.add(barNonCoffee);
       }
   
   while (rs3.next()) {
       barBakery  = new JSONObject();
       barBakery .put("menuName3", rs3.getString("mn_name"));
       barBakery .put("amount3", rs3.getInt("order_sum"));
       listBakery.add(barBakery);
   }
   
   
   responseObj.put("listCoffee", listCoffee);
   responseObj.put("listNonCoffee", listNonCoffee);
   responseObj.put("listBakery", listBakery);
   
   
   
   out.print(responseObj.toString());
   
   rs.close();
   pstmt.close();
   connectDB.closeConnection(con);
   
   rs2.close();
   pstmt2.close();
   connectDB2.closeConnection(con2);
   
   rs3.close();
   pstmt3.close();
   connectDB3.closeConnection(con3);
   
   
} catch (Exception e) {
   e.printStackTrace();   
}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
